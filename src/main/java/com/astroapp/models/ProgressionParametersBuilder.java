/*
 * AstroAppRESTAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.astroapp.models;

import java.util.*;

public class ProgressionParametersBuilder {
    //the instance to build
    private ProgressionParameters progressionParameters;

    /**
     * Default constructor to initialize the instance
     */
    public ProgressionParametersBuilder() {
        progressionParameters = new ProgressionParameters();
    }

    /**
     * List of objects to be included in calculations.
     */
    public ProgressionParametersBuilder objects(List<Integer> objects) {
        progressionParameters.setObjects(objects);
        return this;
    }

    /**
     * List of aspects to include in calculations. This is an array of aspect angles.
     */
    public ProgressionParametersBuilder aspects(List<Integer> aspects) {
        progressionParameters.setAspects(aspects);
        return this;
    }

    /**
     * Types of events.
     */
    public ProgressionParametersBuilder eventTypes(List<Integer> eventTypes) {
        progressionParameters.setEventTypes(eventTypes);
        return this;
    }

    /**
     * Flag to include house ingresses
     */
    public ProgressionParametersBuilder isHouseIngress(boolean isHouseIngress) {
        progressionParameters.setIsHouseIngress(isHouseIngress);
        return this;
    }

    /**
     * Flag to include Lunar Mansion ingresses
     */
    public ProgressionParametersBuilder isMansionIngress(Boolean isMansionIngress) {
        progressionParameters.setIsMansionIngress(isMansionIngress);
        return this;
    }

    /**
     * Flag to include midpoints
     */
    public ProgressionParametersBuilder isMidpoints(Boolean isMidpoints) {
        progressionParameters.setIsMidpoints(isMidpoints);
        return this;
    }

    /**
     * Flag to include ingresses in signs
     */
    public ProgressionParametersBuilder isSignIngress(Boolean isSignIngress) {
        progressionParameters.setIsSignIngress(isSignIngress);
        return this;
    }

    /**
     * Flag to include planetary stations in longitude events
     */
    public ProgressionParametersBuilder isStations(Boolean isStations) {
        progressionParameters.setIsStations(isStations);
        return this;
    }

    /**
     * Flag to include planetary stations in latitude events
     */
    public ProgressionParametersBuilder isStationsLat(Boolean isStationsLat) {
        progressionParameters.setIsStationsLat(isStationsLat);
        return this;
    }

    /**
     * Include aspects to natal.
     */
    public ProgressionParametersBuilder isToNatal(boolean isToNatal) {
        progressionParameters.setIsToNatal(isToNatal);
        return this;
    }

    /**
     * Include Progressions to Progressions events.
     */
    public ProgressionParametersBuilder isToProgressed(Boolean isToProgressed) {
        progressionParameters.setIsToProgressed(isToProgressed);
        return this;
    }

    /**
     * Progression rate. 0 is a secondary progression
     */
    public ProgressionParametersBuilder progressionRate(int progressionRate) {
        progressionParameters.setProgressionRate(progressionRate);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public ProgressionParameters build() {
        return progressionParameters;
    }
}