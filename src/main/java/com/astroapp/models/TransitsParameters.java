/*
 * AstroAppRESTAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.astroapp.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@JsonInclude(Include.ALWAYS)
public class TransitsParameters 
        implements java.io.Serializable {
    private static final long serialVersionUID = 6980871507305393295L;
    private String startDate;
    private String nextStartDate;
    private String lat;
    private String lng;
    private String tz;
    private List<Integer> objects;
    private String exclusions;
    private List<Integer> aspects;
    private List<Integer> eventTypes;
    /** GETTER
     * The date to start the search from.
     */
    @JsonGetter("startDate")
    public String getStartDate ( ) { 
        return this.startDate;
    }
    
    /** SETTER
     * The date to start the search from.
     */
    @JsonSetter("startDate")
    public void setStartDate (String value) { 
        this.startDate = value;
    }
 
    /** GETTER
     * This is the date that will be returned for pagination purposes. Transits are limited to 90 days intervals for Transits to Natal and to 180 days to Transits to Transits. The nextStartDate is the date that should be used as the start date in the next request.
     */
    @JsonGetter("nextStartDate")
    public String getNextStartDate ( ) { 
        return this.nextStartDate;
    }
    
    /** SETTER
     * This is the date that will be returned for pagination purposes. Transits are limited to 90 days intervals for Transits to Natal and to 180 days to Transits to Transits. The nextStartDate is the date that should be used as the start date in the next request.
     */
    @JsonSetter("nextStartDate")
    public void setNextStartDate (String value) { 
        this.nextStartDate = value;
    }
 
    /** GETTER
     * Geographical Latitude.
     */
    @JsonGetter("lat")
    public String getLat ( ) { 
        return this.lat;
    }
    
    /** SETTER
     * Geographical Latitude.
     */
    @JsonSetter("lat")
    public void setLat (String value) { 
        this.lat = value;
    }
 
    /** GETTER
     * Geographical longitude.
     */
    @JsonGetter("lng")
    public String getLng ( ) { 
        return this.lng;
    }
    
    /** SETTER
     * Geographical longitude.
     */
    @JsonSetter("lng")
    public void setLng (String value) { 
        this.lng = value;
    }
 
    /** GETTER
     * Time Zone of the transits location.
     */
    @JsonGetter("tz")
    public String getTz ( ) { 
        return this.tz;
    }
    
    /** SETTER
     * Time Zone of the transits location.
     */
    @JsonSetter("tz")
    public void setTz (String value) { 
        this.tz = value;
    }
 
    /** GETTER
     * List of objects to be included in calculations. This is an array of object IDs.
     */
    @JsonGetter("objects")
    public List<Integer> getObjects ( ) { 
        return this.objects;
    }
    
    /** SETTER
     * List of objects to be included in calculations. This is an array of object IDs.
     */
    @JsonSetter("objects")
    public void setObjects (List<Integer> value) { 
        this.objects = value;
    }
 
    /** GETTER
     * List of objects to explicitly exclude.
     */
    @JsonGetter("exclusions")
    public String getExclusions ( ) { 
        return this.exclusions;
    }
    
    /** SETTER
     * List of objects to explicitly exclude.
     */
    @JsonSetter("exclusions")
    public void setExclusions (String value) { 
        this.exclusions = value;
    }
 
    /** GETTER
     * List of aspects to include in events calculations. This is an array of aspect angles.
     */
    @JsonGetter("aspects")
    public List<Integer> getAspects ( ) { 
        return this.aspects;
    }
    
    /** SETTER
     * List of aspects to include in events calculations. This is an array of aspect angles.
     */
    @JsonSetter("aspects")
    public void setAspects (List<Integer> value) { 
        this.aspects = value;
    }
 
    /** GETTER
     * Type of the events. For example, 1 is aspects to natal planets, 3 is ingresses into houses.
     */
    @JsonGetter("eventTypes")
    public List<Integer> getEventTypes ( ) { 
        return this.eventTypes;
    }
    
    /** SETTER
     * Type of the events. For example, 1 is aspects to natal planets, 3 is ingresses into houses.
     */
    @JsonSetter("eventTypes")
    public void setEventTypes (List<Integer> value) { 
        this.eventTypes = value;
    }
 
}
