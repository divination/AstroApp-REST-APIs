/*
 * AstroAppRESTAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.astroapp.models;

import java.util.*;

public class EventResultBuilder {
    //the instance to build
    private EventResult eventResult;

    /**
     * Default constructor to initialize the instance
     */
    public EventResultBuilder() {
        eventResult = new EventResult();
    }

    /**
     * Angle of the aspect. For example, 0 is conjunction, 60.0 is sextile, 90 is square and so on.
     */
    public EventResultBuilder aspectAngle(int aspectAngle) {
        eventResult.setAspectAngle(aspectAngle);
        return this;
    }

    /**
     * 1: Transit to Planet; 3: Transit to House Cusp.
     */
    public EventResultBuilder eventType(int eventType) {
        eventResult.setEventType(eventType);
        return this;
    }

    /**
     * The exact date of the event.
     */
    public EventResultBuilder exactDate1(String exactDate1) {
        eventResult.setExactDate1(exactDate1);
        return this;
    }

    /**
     * Julian Date of the event
     */
    public EventResultBuilder exactJD(double exactJD) {
        eventResult.setExactJD(exactJD);
        return this;
    }

    /**
     * The exact date of the 2nd event in series. This can only occur in case of a retrograde planet making the same aspect again.
     */
    public EventResultBuilder exactJD2(int exactJD2) {
        eventResult.setExactJD2(exactJD2);
        return this;
    }

    /**
     * The exact longitude of the aspect (ecliptic coordinates).
     */
    public EventResultBuilder exactLng(double exactLng) {
        eventResult.setExactLng(exactLng);
        return this;
    }

    /**
     * The exact longitude of the second event aspect (ecliptic coordinates).
     */
    public EventResultBuilder exactLng2(double exactLng2) {
        eventResult.setExactLng2(exactLng2);
        return this;
    }

    /**
     * Id of the first object making an aspect or participating in the astrological event.
     */
    public EventResultBuilder objectId1(int objectId1) {
        eventResult.setObjectId1(objectId1);
        return this;
    }

    /**
     * Id of the second object forming an aspect or participating in the astrological event.
     */
    public EventResultBuilder objectId2(int objectId2) {
        eventResult.setObjectId2(objectId2);
        return this;
    }

    /**
     * The exact date of the second event in the events series.
     */
    public EventResultBuilder exactDate2(String exactDate2) {
        eventResult.setExactDate2(exactDate2);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public EventResult build() {
        return eventResult;
    }
}