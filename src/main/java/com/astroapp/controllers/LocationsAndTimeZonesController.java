/*
 * AstroAppRESTAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.astroapp.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import com.astroapp.*;
import com.astroapp.models.*;
import com.astroapp.exceptions.*;
import com.astroapp.http.client.HttpClient;
import com.astroapp.http.client.HttpContext;
import com.astroapp.http.request.HttpRequest;
import com.astroapp.http.response.HttpResponse;
import com.astroapp.http.response.HttpStringResponse;
import com.astroapp.http.client.APICallBack;
import com.astroapp.controllers.syncwrapper.APICallBackCatcher;

public class LocationsAndTimeZonesController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static LocationsAndTimeZonesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the LocationsAndTimeZonesController class 
     */
    public static LocationsAndTimeZonesController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new LocationsAndTimeZonesController();
                }
            }
        }
        return instance;
    }

    /**
     * Locations search.
     * This API searches by place names (such as full or partial city names, hospital names, historic locations, military bases and so on). The API returns coordinates of all the places that match the search criteria along with the time zone name.
     * The output from this API is used as an input for all the AstroAPP APIs that require chart calculation or depend on location and/or time zone information.
     * @param    cityName    Required parameter: Full or partial name of the location (city, historical location, reservation, military bases, etc)
     * @param    stateCode    Required parameter: 2-letter state code abbreviation; applicable only for the locations in the USA.
     * @param    countryID    Required parameter: Id of the country. Please contact AstroApp Support for details.
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: Your AstroApp API access key.
     */
    public void getLocations(
                final String cityName,
                final String stateCode,
                final int countryID,
                final String contentType,
                final String key
    ) throws Throwable {

        HttpRequest _request = _buildGetLocationsRequest(cityName, stateCode, countryID, contentType, key);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleGetLocationsResponse(_context);
    }

    /**
     * Locations search.
     * This API searches by place names (such as full or partial city names, hospital names, historic locations, military bases and so on). The API returns coordinates of all the places that match the search criteria along with the time zone name.
     * The output from this API is used as an input for all the AstroAPP APIs that require chart calculation or depend on location and/or time zone information.
     * @param    cityName    Required parameter: Full or partial name of the location (city, historical location, reservation, military bases, etc)
     * @param    stateCode    Required parameter: 2-letter state code abbreviation; applicable only for the locations in the USA.
     * @param    countryID    Required parameter: Id of the country. Please contact AstroApp Support for details.
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: Your AstroApp API access key.
     */
    public void getLocationsAsync(
                final String cityName,
                final String stateCode,
                final int countryID,
                final String contentType,
                final String key,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetLocationsRequest(cityName, stateCode, countryID, contentType, key);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleGetLocationsResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getLocations
     */
    private HttpRequest _buildGetLocationsRequest(
                final String cityName,
                final String stateCode,
                final int countryID,
                final String contentType,
                final String key) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/locations/name");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("cityName", cityName);
        _queryParameters.put("stateCode", stateCode);
        _queryParameters.put("countryID", countryID);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("key", key);

        _headers.put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getLocations
     */
    private void _handleGetLocationsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * Locations search by coordinates.
     * This API provides proximity searches based on the provided geographical coordinates (longitude and latitude). The API returns coordinates of all the places that match the search criteria along with the time zone name.
     * The default proximity radius is 10 international miles (or 16.0934 km) from the provided location.
     * The output from this API is used as an input for all the AstroAPP APIs that require chart calculation or depend on location and/or time zone information.
     * @param    lat    Required parameter: Geographical latitude
     * @param    lng    Required parameter: Geographical longitude
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: You AstroApp API access key.
     */
    public void getLocationsByCoords(
                final double lat,
                final double lng,
                final String contentType,
                final String key
    ) throws Throwable {

        HttpRequest _request = _buildGetLocationsByCoordsRequest(lat, lng, contentType, key);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleGetLocationsByCoordsResponse(_context);
    }

    /**
     * Locations search by coordinates.
     * This API provides proximity searches based on the provided geographical coordinates (longitude and latitude). The API returns coordinates of all the places that match the search criteria along with the time zone name.
     * The default proximity radius is 10 international miles (or 16.0934 km) from the provided location.
     * The output from this API is used as an input for all the AstroAPP APIs that require chart calculation or depend on location and/or time zone information.
     * @param    lat    Required parameter: Geographical latitude
     * @param    lng    Required parameter: Geographical longitude
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: You AstroApp API access key.
     */
    public void getLocationsByCoordsAsync(
                final double lat,
                final double lng,
                final String contentType,
                final String key,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetLocationsByCoordsRequest(lat, lng, contentType, key);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleGetLocationsByCoordsResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getLocationsByCoords
     */
    private HttpRequest _buildGetLocationsByCoordsRequest(
                final double lat,
                final double lng,
                final String contentType,
                final String key) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/locations/coord");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("lat", lat);
        _queryParameters.put("lng", lng);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("key", key);

        _headers.put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
        _headers.put("user-agent", BaseController.userAgent);


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getLocationsByCoords
     */
    private void _handleGetLocationsByCoordsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

}
