/*
 * AstroAppRESTAPIsLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.astroapp.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.astroapp.*;
import com.astroapp.models.*;
import com.astroapp.exceptions.*;
import com.astroapp.http.client.HttpClient;
import com.astroapp.http.client.HttpContext;
import com.astroapp.http.request.HttpRequest;
import com.astroapp.http.response.HttpResponse;
import com.astroapp.http.response.HttpStringResponse;
import com.astroapp.http.client.APICallBack;
import com.astroapp.controllers.syncwrapper.APICallBackCatcher;

public class ChartsAndDetailsController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static ChartsAndDetailsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the ChartsAndDetailsController class 
     */
    public static ChartsAndDetailsController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new ChartsAndDetailsController();
                }
            }
        }
        return instance;
    }

    /**
     * This API provides statistical information for a given chart. It requires a previously calculated chart (chart with objects/planets and house cusps already calculated).
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: AstroApp API key
     * @param    body    Required parameter: Pre-calculated chart data.
     * @return    Returns the StatsBySignResponse response from the API call 
     */
    public StatsBySignResponse createStatsBySign(
                final String contentType,
                final String key,
                final StatsBySignRequest body
    ) throws Throwable {

        HttpRequest _request = _buildCreateStatsBySignRequest(contentType, key, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateStatsBySignResponse(_context);
    }

    /**
     * This API provides statistical information for a given chart. It requires a previously calculated chart (chart with objects/planets and house cusps already calculated).
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: AstroApp API key
     * @param    body    Required parameter: Pre-calculated chart data.
     */
    public void createStatsBySignAsync(
                final String contentType,
                final String key,
                final StatsBySignRequest body,
                final APICallBack<StatsBySignResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateStatsBySignRequest(contentType, key, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            StatsBySignResponse returnValue = _handleCreateStatsBySignResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createStatsBySign
     */
    private HttpRequest _buildCreateStatsBySignRequest(
                final String contentType,
                final String key,
                final StatsBySignRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/stats/bysign");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("key", key);

        _headers.put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createStatsBySign
     * @return An object of type StatsBySignResponse
     */
    private StatsBySignResponse _handleCreateStatsBySignResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("Failed authentication.", _context);
        }
        if (_responseCode == 404) {
            throw new APIException("Stats data not found or cannot be calculated.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        StatsBySignResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<StatsBySignResponse>(){});

        return _result;
    }

    /**
     * API that returns essential and accidental dignities based on already calculated chart data.
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: AstroApp API key
     * @param    body    Required parameter: Pre-calculated chart data.
     * @return    Returns the DignitiesResponse response from the API call 
     */
    public DignitiesResponse createDignities(
                final String contentType,
                final String key,
                final DignitiesRequest body
    ) throws Throwable {

        HttpRequest _request = _buildCreateDignitiesRequest(contentType, key, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateDignitiesResponse(_context);
    }

    /**
     * API that returns essential and accidental dignities based on already calculated chart data.
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: AstroApp API key
     * @param    body    Required parameter: Pre-calculated chart data.
     */
    public void createDignitiesAsync(
                final String contentType,
                final String key,
                final DignitiesRequest body,
                final APICallBack<DignitiesResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateDignitiesRequest(contentType, key, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DignitiesResponse returnValue = _handleCreateDignitiesResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createDignities
     */
    private HttpRequest _buildCreateDignitiesRequest(
                final String contentType,
                final String key,
                final DignitiesRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/dignities");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("key", key);

        _headers.put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createDignities
     * @return An object of type DignitiesResponse
     */
    private DignitiesResponse _handleCreateDignitiesResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("Failed Authentication.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        DignitiesResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DignitiesResponse>(){});

        return _result;
    }

    /**
     * API that returns essential and accidental dignities based on the regular chart data (birth date and time along with location and the time zone).
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: AstroApp API key
     * @param    body    Required parameter: Chart information that will be used to calculate a new chart and provide dignities data.
     * @return    Returns the DignitiesResponse response from the API call 
     */
    public DignitiesResponse createDignitiesForDates(
                final String contentType,
                final String key,
                final DignitiesForDatesRequest body
    ) throws Throwable {

        HttpRequest _request = _buildCreateDignitiesForDatesRequest(contentType, key, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateDignitiesForDatesResponse(_context);
    }

    /**
     * API that returns essential and accidental dignities based on the regular chart data (birth date and time along with location and the time zone).
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: AstroApp API key
     * @param    body    Required parameter: Chart information that will be used to calculate a new chart and provide dignities data.
     */
    public void createDignitiesForDatesAsync(
                final String contentType,
                final String key,
                final DignitiesForDatesRequest body,
                final APICallBack<DignitiesResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateDignitiesForDatesRequest(contentType, key, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DignitiesResponse returnValue = _handleCreateDignitiesForDatesResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createDignitiesForDates
     */
    private HttpRequest _buildCreateDignitiesForDatesRequest(
                final String contentType,
                final String key,
                final DignitiesForDatesRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/dignities");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("key", key);

        _headers.put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createDignitiesForDates
     * @return An object of type DignitiesResponse
     */
    private DignitiesResponse _handleCreateDignitiesForDatesResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new APIException("Failed Authentication.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        DignitiesResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DignitiesResponse>(){});

        return _result;
    }

    /**
     * This API is used to create a new astrological chart (new horoscope).
     * The API Returns the new chart data, and optionally - aspects listing and the chart image in the png format.
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: AstroApp API key
     * @param    body    Required parameter: Chart information to be used to calculate a new horoscope.
     * @return    Returns the ChartDataResponse response from the API call 
     */
    public ChartDataResponse createChartData(
                final String contentType,
                final String key,
                final ChartDataRequest body
    ) throws Throwable {

        HttpRequest _request = _buildCreateChartDataRequest(contentType, key, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateChartDataResponse(_context);
    }

    /**
     * This API is used to create a new astrological chart (new horoscope).
     * The API Returns the new chart data, and optionally - aspects listing and the chart image in the png format.
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: AstroApp API key
     * @param    body    Required parameter: Chart information to be used to calculate a new horoscope.
     */
    public void createChartDataAsync(
                final String contentType,
                final String key,
                final ChartDataRequest body,
                final APICallBack<ChartDataResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateChartDataRequest(contentType, key, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ChartDataResponse returnValue = _handleCreateChartDataResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createChartData
     */
    private HttpRequest _buildCreateChartDataRequest(
                final String contentType,
                final String key,
                final ChartDataRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/chart");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("key", key);

        _headers.put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createChartData
     * @return An object of type ChartDataResponse
     */
    private ChartDataResponse _handleCreateChartDataResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new APIException("Invalid or missing parameters", _context);
        }
        if (_responseCode == 401) {
            throw new APIException("Failed authentication.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ChartDataResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ChartDataResponse>(){});

        return _result;
    }

    /**
     * This API is used to create a new astrological chart (new horoscope).
     * The API Returns the new chart data, and optionally - aspects listing and the chart image in the png format.
     * The API is identical to the Chart Data API and is provided to demonstrate the proper Bearer token authentication usage.
     * The toekn based authentication method is the required method that must be used for all AstroApp REST APIs.
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: AstroApp API key
     * @param    body    Required parameter: Chart information for the new horoscope.
     * @return    Returns the ChartDataResponse response from the API call 
     */
    public ChartDataResponse createChartDataWithTokensBasedAuthentication(
                final String contentType,
                final String key,
                final ChartDataRequest body
    ) throws Throwable {

        HttpRequest _request = _buildCreateChartDataWithTokensBasedAuthenticationRequest(contentType, key, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateChartDataWithTokensBasedAuthenticationResponse(_context);
    }

    /**
     * This API is used to create a new astrological chart (new horoscope).
     * The API Returns the new chart data, and optionally - aspects listing and the chart image in the png format.
     * The API is identical to the Chart Data API and is provided to demonstrate the proper Bearer token authentication usage.
     * The toekn based authentication method is the required method that must be used for all AstroApp REST APIs.
     * @param    contentType    Required parameter: Example: 
     * @param    key    Required parameter: AstroApp API key
     * @param    body    Required parameter: Chart information for the new horoscope.
     */
    public void createChartDataWithTokensBasedAuthenticationAsync(
                final String contentType,
                final String key,
                final ChartDataRequest body,
                final APICallBack<ChartDataResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateChartDataWithTokensBasedAuthenticationRequest(contentType, key, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ChartDataResponse returnValue = _handleCreateChartDataWithTokensBasedAuthenticationResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createChartDataWithTokensBasedAuthentication
     */
    private HttpRequest _buildCreateChartDataWithTokensBasedAuthenticationRequest(
                final String contentType,
                final String key,
                final ChartDataRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/chart");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", contentType);
        _headers.put("key", key);

        _headers.put( "Authorization", String.format("Bearer %1$s", Configuration.oAuthAccessToken) );
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createChartDataWithTokensBasedAuthentication
     * @return An object of type ChartDataResponse
     */
    private ChartDataResponse _handleCreateChartDataWithTokensBasedAuthenticationResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new APIException("Invalid or missing parameters", _context);
        }
        if (_responseCode == 401) {
            throw new APIException("Failed authentication.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ChartDataResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ChartDataResponse>(){});

        return _result;
    }

}
